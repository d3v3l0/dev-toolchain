#!/usr/bin/env bash

set -ex

NIXCONFIG=$HOME/code/nixconfig
MINICONDA=$HOME/miniconda
EMACS_VERSION=25.3

export PATH=$MINICONDA/bin:$PATH


function env_ubuntu1404 {
    export EMACS_UBUNTU_VERSION=23
    export RUBY_UBUNTU_VERSION=2.0
}

function env_ubuntu1804 {
    export EMACS_UBUNTU_VERSION=25
    export RUBY_UBUNTU_VERSION=2.5
}

# Dotfiles
function install_dotfiles() {
    mkdir -p $HOME/.config

    ln -sf $NIXCONFIG/dotfiles/bash_personal ~/.bash_personal
    ln -sf $NIXCONFIG/terminator ~/.config/terminator
}

# Basic packages
function install_apt_packages() {

    sudo apt install -y \
         xfonts-terminus \
         gnome-tweak-tool \
         pandoc \
         ccache \
         terminator \
         xsel \
         libssl-dev \
         valgrind \
         gdb \
         bison \
         flex \
         pkg-config \
         autoconf \
         automake \
         libtool \
         subversion \
         cloc \
         filezilla \
         bcrypt

    LLVM_VERSION=6.0

    sudo apt-get install -y \
         clang-$LLVM_VERSION \
         clang-format-$LLVM_VERSION \
         clang-tidy-$LLVM_VERSION \
         libfuzzer-$LLVM_VERSION-dev
}

function install_apt_packages_1404() {
    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
    sudo apt-add-repository -y "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty main"
    sudo apt-add-repository -y "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main"
    sudo apt update
    install_apt_packages
}

function install_apt_packages_1804() {
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
    sudo apt-add-repository -y "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main"
    sudo apt-add-repository -y "deb http://apt.llvm.org/trusty/ llvm-toolchain-bionic-6.0 main"
    sudo apt update
    install_apt_packages

    sudo apt install -y \
         gcc-4.8 \
         g++-4.8 \
         redshift \
         redshift-gtk

}


# Miniconda
function install_conda() {
    MINICONDA_URL="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"

    wget -O miniconda.sh $MINICONDA_URL
    bash miniconda.sh -b -p $MINICONDA
    rm -f miniconda.sh
    export PATH="$MINICONDA/bin:$PATH"

    conda update -y -q conda
    conda config --set auto_update_conda false
    conda info -a

    conda config --set show_channel_urls True
    conda config --add channels https://repo.continuum.io/pkgs/free
    conda config --add channels conda-forge
}

# C++ toolchain
function install_cpp_toolchain() {
    conda create -yq -p $HOME/cpp-toolchain \
          boost-cpp \
          flatbuffers \
          rapidjson \
          thrift-cpp \
          snappy \
          zlib \
          gflags \
          brotli \
          lz4-c \
          ninja \
          libprotobuf \
          zstd \
          gtest \
          -c conda-forge

    conda install -yq -p $HOME/cpp-toolchain \
          cmake \
          git \
          flatbuffers \
          rapidjson \
          thrift-cpp \
          snappy \
          zlib \
          gflags \
          brotli \
          lz4-c \
          ninja \
          libprotobuf \
          zstd \
          gtest \
          -c conda-forge
}

function install_cpp_runtime_toolchain() {
    conda create -yq -p $HOME/cpp-runtime-toolchain \
          boost-cpp \
          -c conda-forge
}

# Install conda environments
function create_conda_dev_environments() {
    conda create -yq -n arrow-dev \
          python=3.6

    conda create -yq -n arrow-dev-2.7 \
          python=2.7
}

function install_conda_dev_environments() {
    ARROW_CONDA_DEPS="\
          numpy \
          six \
          setuptools \
          cython \
          pandas \
          pytest \
          flake8 \
          cmake \
          git \
          requests \
          jira \
          ninja \
          ipython \
          jupyter \
          setuptools_scm \
          matplotlib"

    conda install -yq -n arrow-dev \
          $ARROW_CONDA_DEPS

    conda install -yq -n arrow-dev-2.7 \
          $ARROW_CONDA_DEPS
}

# Build and install emacs
function install_emacs() {
    sudo apt-get build-dep -y emacs$EMACS_UBUNTU_VERSION

    rm -rf $HOME/.emacs.d
    ln -sf $NIXCONFIG/emacs $HOME/.emacs.d

    wget -O emacs.tar.gz http://ftp.gnu.org/gnu/emacs/emacs-$EMACS_VERSION.tar.xz
    tar xvf emacs.tar.gz
    pushd emacs-$EMACS_VERSION
    ./configure
    make -j8
    sudo make install
    popd
    rm -rf emacs-$EMACS_VERSION
    rm emacs.tar.gz
}

# Install Ruby
function install_ruby() {
    sudo apt-get build-dep -y ruby$RUBY_UBUNTU_VERSION
    RUBY_VERSION=2.5.0
    wget -O ruby.tar.gz https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz
    tar xvf ruby.tar.gz
    pushd ruby-$RUBY_VERSION
    CC=gcc ./configure --prefix=$HOME/ruby
    CC=gcc make -j8
    make install
    popd
    rm -rf ruby-$RUBY_VERSION
    rm -rf ruby.tar.gz
}

# Setup Docker
function setup_docker() {
    sudo apt-get -y install \
         apt-transport-https \
         ca-certificates \
         curl \
         software-properties-common

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository \
         "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
         $(lsb_release -cs) \
         stable"

    sudo apt-get update
    sudo apt install docker-ce

    sudo usermod -aG docker $USER
}

# Golang

# Ocaml

# Spotify
function install_spotify() {
    sudo apt-add-repository -y "deb http://repository.spotify.com stable non-free"
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D2C19886
    sudo apt-get update -qq
    sudo apt-get install -y spotify-client
}

# Install cuda
# https://askubuntu.com/questions/799184/how-can-i-install-cuda-on-ubuntu-16-04
# Check the md5 sum: md5sum cuda_7.5.18_linux.run. Only continue if it is correct.

# Remove any other installation (sudo apt-get purge nvidia-cuda* - if you want to
# install the drivers too, then sudo apt-get purge nvidia-*.)
# If you want to install the display drivers(*), logout from your GUI. Go to a
# terminal session (ctrl+alt+F2)
# Stop lightdm: sudo service lightdm stop

# Create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following
# contents:

# blacklist nouveau
# options nouveau modeset=0
#
# Then do: sudo update-initramfs -u

# sudo sh cuda_7.5.18_linux.run --override.

# Make sure that you say y for the symbolic link.
# Start lightdm again: sudo service lightdm start

function install_cuda() {
    sudo add-apt-repository -y ppa:graphics-drivers
    sudo apt-get update
    sudo apt-get install nvidia-390
}

# function install_hugo() {
#     go get github.com/magefile/mage
#     go get -d github.com/gohugoio/hugo
#     cd ${GOPATH:-$HOME/go}/src/github.com/gohugoio/hugo
#     mage vendor
#     mage install
# }

# FIRST TIME? Make sure to uncomment all the deb-src entries in /etc/apt/sources.list

env_ubuntu1404

# install_apt_packages_1404

# install_conda
# create_conda_dev_environments
# install_conda_dev_environments
# install_cuda
# install_ruby
install_dotfiles
# install_spotify
# install_cpp_toolchain
install_emacs
